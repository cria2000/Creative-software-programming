

Terminals which are not used:

   END
   ERROR


State 103 contains 1 shift/reduce conflict.

Grammar
rule 1    program -> declaration_list
rule 2    declaration_list -> declaration_list declaration
rule 3    declaration_list -> declaration
rule 4    declaration -> var_declaration
rule 5    declaration -> fun_declaration
rule 6    @1 ->		/* empty */
rule 7    var_declaration -> type_specifier ID @1 SEMI
rule 8    @2 ->		/* empty */
rule 9    @3 ->		/* empty */
rule 10   var_declaration -> type_specifier ID @2 LBRACE NUM @3 RBRACE SEMI
rule 11   type_specifier -> INT
rule 12   type_specifier -> VOID
rule 13   @4 ->		/* empty */
rule 14   fun_declaration -> type_specifier ID @4 LPAREN params RPAREN compound_stmt
rule 15   params -> param_list
rule 16   params -> VOID
rule 17   param_list -> param_list COMMA param
rule 18   param_list -> param
rule 19   param -> type_specifier ID
rule 20   @5 ->		/* empty */
rule 21   param -> type_specifier ID @5 LBRACE RBRACE
rule 22   compound_stmt -> LCURLY local_declarations statement_list RCURLY
rule 23   local_declarations -> local_declarations var_declaration
rule 24   local_declarations ->		/* empty */
rule 25   statement_list -> statement_list statement
rule 26   statement_list ->		/* empty */
rule 27   statement -> expression_stmt
rule 28   statement -> compound_stmt
rule 29   statement -> selection_stmt
rule 30   statement -> iteration_stmt
rule 31   statement -> return_stmt
rule 32   expression_stmt -> expression SEMI
rule 33   expression_stmt -> SEMI
rule 34   selection_stmt -> IF LPAREN expression RPAREN statement
rule 35   selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement
rule 36   iteration_stmt -> WHILE LPAREN expression RPAREN statement
rule 37   return_stmt -> RETURN SEMI
rule 38   return_stmt -> RETURN expression SEMI
rule 39   expression -> var ASSIGN expression
rule 40   expression -> simple_expression
rule 41   var -> ID
rule 42   @6 ->		/* empty */
rule 43   var -> ID @6 LBRACE expression RBRACE
rule 44   simple_expression -> additive_expression LE additive_expression
rule 45   simple_expression -> additive_expression LT additive_expression
rule 46   simple_expression -> additive_expression GT additive_expression
rule 47   simple_expression -> additive_expression GE additive_expression
rule 48   simple_expression -> additive_expression NE additive_expression
rule 49   simple_expression -> additive_expression EQ additive_expression
rule 50   simple_expression -> additive_expression
rule 51   additive_expression -> additive_expression PLUS term
rule 52   additive_expression -> additive_expression MINUS term
rule 53   additive_expression -> term
rule 54   term -> term TIMES factor
rule 55   term -> term OVER factor
rule 56   term -> factor
rule 57   factor -> LPAREN expression RPAREN
rule 58   factor -> var
rule 59   factor -> call
rule 60   factor -> NUM
rule 61   @7 ->		/* empty */
rule 62   call -> ID @7 LPAREN args RPAREN
rule 63   args -> arg_list
rule 64   args ->		/* empty */
rule 65   arg_list -> arg_list COMMA expression
rule 66   arg_list -> expression

Terminals, with rules where they appear

$ (-1)
error (256)
IF (258) 34 35
ELSE (259) 35
WHILE (260) 36
RETURN (261) 37 38
INT (262) 11
VOID (263) 12 16
END (264)
ID (265) 7 10 14 19 21 41 43 62
NUM (266) 10 60
ASSIGN (267) 39
EQ (268) 49
NE (269) 48
LT (270) 45
LE (271) 44
GT (272) 46
GE (273) 47
PLUS (274) 51
MINUS (275) 52
TIMES (276) 54
OVER (277) 55
LPAREN (278) 14 34 35 36 57 62
RPAREN (279) 14 34 35 36 57 62
LBRACE (280) 10 21 43
RBRACE (281) 10 21 43
LCURLY (282) 22
RCURLY (283) 22
SEMI (284) 7 10 32 33 37 38
COMMA (285) 17 65
ERROR (286)

Nonterminals, with rules where they appear

program (32)
    on left: 1
declaration_list (33)
    on left: 2 3, on right: 1 2
declaration (34)
    on left: 4 5, on right: 2 3
var_declaration (35)
    on left: 7 10, on right: 4 23
@1 (36)
    on left: 6, on right: 7
@2 (37)
    on left: 8, on right: 10
@3 (38)
    on left: 9, on right: 10
type_specifier (39)
    on left: 11 12, on right: 7 10 14 19 21
fun_declaration (40)
    on left: 14, on right: 5
@4 (41)
    on left: 13, on right: 14
params (42)
    on left: 15 16, on right: 14
param_list (43)
    on left: 17 18, on right: 15 17
param (44)
    on left: 19 21, on right: 17 18
@5 (45)
    on left: 20, on right: 21
compound_stmt (46)
    on left: 22, on right: 14 28
local_declarations (47)
    on left: 23 24, on right: 22 23
statement_list (48)
    on left: 25 26, on right: 22 25
statement (49)
    on left: 27 28 29 30 31, on right: 25 34 35 36
expression_stmt (50)
    on left: 32 33, on right: 27
selection_stmt (51)
    on left: 34 35, on right: 29
iteration_stmt (52)
    on left: 36, on right: 30
return_stmt (53)
    on left: 37 38, on right: 31
expression (54)
    on left: 39 40, on right: 32 34 35 36 38 39 43 57 65 66
var (55)
    on left: 41 43, on right: 39 58
@6 (56)
    on left: 42, on right: 43
simple_expression (57)
    on left: 44 45 46 47 48 49 50, on right: 40
additive_expression (58)
    on left: 51 52 53, on right: 44 45 46 47 48 49 50 51 52
term (59)
    on left: 54 55 56, on right: 51 52 53 54 55
factor (60)
    on left: 57 58 59 60, on right: 54 55 56
call (61)
    on left: 62, on right: 59
@7 (62)
    on left: 61, on right: 62
args (63)
    on left: 63 64, on right: 62
arg_list (64)
    on left: 65 66, on right: 63 65


state 0

    INT 	shift, and go to state 1
    VOID	shift, and go to state 2

    program	go to state 111
    declaration_list	go to state 3
    declaration	go to state 4
    var_declaration	go to state 5
    type_specifier	go to state 6
    fun_declaration	go to state 7



state 1

    type_specifier  ->  INT .   (rule 11)

    $default	reduce using rule 11 (type_specifier)



state 2

    type_specifier  ->  VOID .   (rule 12)

    $default	reduce using rule 12 (type_specifier)



state 3

    program  ->  declaration_list .   (rule 1)
    declaration_list  ->  declaration_list . declaration   (rule 2)

    INT 	shift, and go to state 1
    VOID	shift, and go to state 2

    $default	reduce using rule 1 (program)

    declaration	go to state 8
    var_declaration	go to state 5
    type_specifier	go to state 6
    fun_declaration	go to state 7



state 4

    declaration_list  ->  declaration .   (rule 3)

    $default	reduce using rule 3 (declaration_list)



state 5

    declaration  ->  var_declaration .   (rule 4)

    $default	reduce using rule 4 (declaration)



state 6

    var_declaration  ->  type_specifier . ID @1 SEMI   (rule 7)
    var_declaration  ->  type_specifier . ID @2 LBRACE NUM @3 RBRACE SEMI   (rule 10)
    fun_declaration  ->  type_specifier . ID @4 LPAREN params RPAREN compound_stmt   (rule 14)

    ID  	shift, and go to state 9



state 7

    declaration  ->  fun_declaration .   (rule 5)

    $default	reduce using rule 5 (declaration)



state 8

    declaration_list  ->  declaration_list declaration .   (rule 2)

    $default	reduce using rule 2 (declaration_list)



state 9

    var_declaration  ->  type_specifier ID . @1 SEMI   (rule 7)
    var_declaration  ->  type_specifier ID . @2 LBRACE NUM @3 RBRACE SEMI   (rule 10)
    fun_declaration  ->  type_specifier ID . @4 LPAREN params RPAREN compound_stmt   (rule 14)

    LPAREN	reduce using rule 13 (@4)
    LBRACE	reduce using rule 8 (@2)
    $default	reduce using rule 6 (@1)

    @1  	go to state 10
    @2  	go to state 11
    @4  	go to state 12



state 10

    var_declaration  ->  type_specifier ID @1 . SEMI   (rule 7)

    SEMI	shift, and go to state 13



state 11

    var_declaration  ->  type_specifier ID @2 . LBRACE NUM @3 RBRACE SEMI   (rule 10)

    LBRACE	shift, and go to state 14



state 12

    fun_declaration  ->  type_specifier ID @4 . LPAREN params RPAREN compound_stmt   (rule 14)

    LPAREN	shift, and go to state 15



state 13

    var_declaration  ->  type_specifier ID @1 SEMI .   (rule 7)

    $default	reduce using rule 7 (var_declaration)



state 14

    var_declaration  ->  type_specifier ID @2 LBRACE . NUM @3 RBRACE SEMI   (rule 10)

    NUM 	shift, and go to state 16



state 15

    fun_declaration  ->  type_specifier ID @4 LPAREN . params RPAREN compound_stmt   (rule 14)

    INT 	shift, and go to state 1
    VOID	shift, and go to state 17

    type_specifier	go to state 18
    params	go to state 19
    param_list	go to state 20
    param	go to state 21



state 16

    var_declaration  ->  type_specifier ID @2 LBRACE NUM . @3 RBRACE SEMI   (rule 10)

    $default	reduce using rule 9 (@3)

    @3  	go to state 22



state 17

    type_specifier  ->  VOID .   (rule 12)
    params  ->  VOID .   (rule 16)

    RPAREN	reduce using rule 16 (params)
    $default	reduce using rule 12 (type_specifier)



state 18

    param  ->  type_specifier . ID   (rule 19)
    param  ->  type_specifier . ID @5 LBRACE RBRACE   (rule 21)

    ID  	shift, and go to state 23



state 19

    fun_declaration  ->  type_specifier ID @4 LPAREN params . RPAREN compound_stmt   (rule 14)

    RPAREN	shift, and go to state 24



state 20

    params  ->  param_list .   (rule 15)
    param_list  ->  param_list . COMMA param   (rule 17)

    COMMA	shift, and go to state 25

    $default	reduce using rule 15 (params)



state 21

    param_list  ->  param .   (rule 18)

    $default	reduce using rule 18 (param_list)



state 22

    var_declaration  ->  type_specifier ID @2 LBRACE NUM @3 . RBRACE SEMI   (rule 10)

    RBRACE	shift, and go to state 26



state 23

    param  ->  type_specifier ID .   (rule 19)
    param  ->  type_specifier ID . @5 LBRACE RBRACE   (rule 21)

    LBRACE	reduce using rule 20 (@5)
    $default	reduce using rule 19 (param)

    @5  	go to state 27



state 24

    fun_declaration  ->  type_specifier ID @4 LPAREN params RPAREN . compound_stmt   (rule 14)

    LCURLY	shift, and go to state 28

    compound_stmt	go to state 29



state 25

    param_list  ->  param_list COMMA . param   (rule 17)

    INT 	shift, and go to state 1
    VOID	shift, and go to state 2

    type_specifier	go to state 18
    param	go to state 30



state 26

    var_declaration  ->  type_specifier ID @2 LBRACE NUM @3 RBRACE . SEMI   (rule 10)

    SEMI	shift, and go to state 31



state 27

    param  ->  type_specifier ID @5 . LBRACE RBRACE   (rule 21)

    LBRACE	shift, and go to state 32



state 28

    compound_stmt  ->  LCURLY . local_declarations statement_list RCURLY   (rule 22)

    $default	reduce using rule 24 (local_declarations)

    local_declarations	go to state 33



state 29

    fun_declaration  ->  type_specifier ID @4 LPAREN params RPAREN compound_stmt .   (rule 14)

    $default	reduce using rule 14 (fun_declaration)



state 30

    param_list  ->  param_list COMMA param .   (rule 17)

    $default	reduce using rule 17 (param_list)



state 31

    var_declaration  ->  type_specifier ID @2 LBRACE NUM @3 RBRACE SEMI .   (rule 10)

    $default	reduce using rule 10 (var_declaration)



state 32

    param  ->  type_specifier ID @5 LBRACE . RBRACE   (rule 21)

    RBRACE	shift, and go to state 34



state 33

    compound_stmt  ->  LCURLY local_declarations . statement_list RCURLY   (rule 22)
    local_declarations  ->  local_declarations . var_declaration   (rule 23)

    INT 	shift, and go to state 1
    VOID	shift, and go to state 2

    $default	reduce using rule 26 (statement_list)

    var_declaration	go to state 35
    type_specifier	go to state 36
    statement_list	go to state 37



state 34

    param  ->  type_specifier ID @5 LBRACE RBRACE .   (rule 21)

    $default	reduce using rule 21 (param)



state 35

    local_declarations  ->  local_declarations var_declaration .   (rule 23)

    $default	reduce using rule 23 (local_declarations)



state 36

    var_declaration  ->  type_specifier . ID @1 SEMI   (rule 7)
    var_declaration  ->  type_specifier . ID @2 LBRACE NUM @3 RBRACE SEMI   (rule 10)

    ID  	shift, and go to state 38



state 37

    compound_stmt  ->  LCURLY local_declarations statement_list . RCURLY   (rule 22)
    statement_list  ->  statement_list . statement   (rule 25)

    IF  	shift, and go to state 39
    WHILE	shift, and go to state 40
    RETURN	shift, and go to state 41
    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44
    LCURLY	shift, and go to state 28
    RCURLY	shift, and go to state 45
    SEMI	shift, and go to state 46

    compound_stmt	go to state 47
    statement	go to state 48
    expression_stmt	go to state 49
    selection_stmt	go to state 50
    iteration_stmt	go to state 51
    return_stmt	go to state 52
    expression	go to state 53
    var 	go to state 54
    simple_expression	go to state 55
    additive_expression	go to state 56
    term	go to state 57
    factor	go to state 58
    call	go to state 59



state 38

    var_declaration  ->  type_specifier ID . @1 SEMI   (rule 7)
    var_declaration  ->  type_specifier ID . @2 LBRACE NUM @3 RBRACE SEMI   (rule 10)

    LBRACE	reduce using rule 8 (@2)
    $default	reduce using rule 6 (@1)

    @1  	go to state 10
    @2  	go to state 11



state 39

    selection_stmt  ->  IF . LPAREN expression RPAREN statement   (rule 34)
    selection_stmt  ->  IF . LPAREN expression RPAREN statement ELSE statement   (rule 35)

    LPAREN	shift, and go to state 60



state 40

    iteration_stmt  ->  WHILE . LPAREN expression RPAREN statement   (rule 36)

    LPAREN	shift, and go to state 61



state 41

    return_stmt  ->  RETURN . SEMI   (rule 37)
    return_stmt  ->  RETURN . expression SEMI   (rule 38)

    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44
    SEMI	shift, and go to state 62

    expression	go to state 63
    var 	go to state 54
    simple_expression	go to state 55
    additive_expression	go to state 56
    term	go to state 57
    factor	go to state 58
    call	go to state 59



state 42

    var  ->  ID .   (rule 41)
    var  ->  ID . @6 LBRACE expression RBRACE   (rule 43)
    call  ->  ID . @7 LPAREN args RPAREN   (rule 62)

    LPAREN	reduce using rule 61 (@7)
    LBRACE	reduce using rule 42 (@6)
    $default	reduce using rule 41 (var)

    @6  	go to state 64
    @7  	go to state 65



state 43

    factor  ->  NUM .   (rule 60)

    $default	reduce using rule 60 (factor)



state 44

    factor  ->  LPAREN . expression RPAREN   (rule 57)

    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44

    expression	go to state 66
    var 	go to state 54
    simple_expression	go to state 55
    additive_expression	go to state 56
    term	go to state 57
    factor	go to state 58
    call	go to state 59



state 45

    compound_stmt  ->  LCURLY local_declarations statement_list RCURLY .   (rule 22)

    $default	reduce using rule 22 (compound_stmt)



state 46

    expression_stmt  ->  SEMI .   (rule 33)

    $default	reduce using rule 33 (expression_stmt)



state 47

    statement  ->  compound_stmt .   (rule 28)

    $default	reduce using rule 28 (statement)



state 48

    statement_list  ->  statement_list statement .   (rule 25)

    $default	reduce using rule 25 (statement_list)



state 49

    statement  ->  expression_stmt .   (rule 27)

    $default	reduce using rule 27 (statement)



state 50

    statement  ->  selection_stmt .   (rule 29)

    $default	reduce using rule 29 (statement)



state 51

    statement  ->  iteration_stmt .   (rule 30)

    $default	reduce using rule 30 (statement)



state 52

    statement  ->  return_stmt .   (rule 31)

    $default	reduce using rule 31 (statement)



state 53

    expression_stmt  ->  expression . SEMI   (rule 32)

    SEMI	shift, and go to state 67



state 54

    expression  ->  var . ASSIGN expression   (rule 39)
    factor  ->  var .   (rule 58)

    ASSIGN	shift, and go to state 68

    $default	reduce using rule 58 (factor)



state 55

    expression  ->  simple_expression .   (rule 40)

    $default	reduce using rule 40 (expression)



state 56

    simple_expression  ->  additive_expression . LE additive_expression   (rule 44)
    simple_expression  ->  additive_expression . LT additive_expression   (rule 45)
    simple_expression  ->  additive_expression . GT additive_expression   (rule 46)
    simple_expression  ->  additive_expression . GE additive_expression   (rule 47)
    simple_expression  ->  additive_expression . NE additive_expression   (rule 48)
    simple_expression  ->  additive_expression . EQ additive_expression   (rule 49)
    simple_expression  ->  additive_expression .   (rule 50)
    additive_expression  ->  additive_expression . PLUS term   (rule 51)
    additive_expression  ->  additive_expression . MINUS term   (rule 52)

    EQ  	shift, and go to state 69
    NE  	shift, and go to state 70
    LT  	shift, and go to state 71
    LE  	shift, and go to state 72
    GT  	shift, and go to state 73
    GE  	shift, and go to state 74
    PLUS	shift, and go to state 75
    MINUS	shift, and go to state 76

    $default	reduce using rule 50 (simple_expression)



state 57

    additive_expression  ->  term .   (rule 53)
    term  ->  term . TIMES factor   (rule 54)
    term  ->  term . OVER factor   (rule 55)

    TIMES	shift, and go to state 77
    OVER	shift, and go to state 78

    $default	reduce using rule 53 (additive_expression)



state 58

    term  ->  factor .   (rule 56)

    $default	reduce using rule 56 (term)



state 59

    factor  ->  call .   (rule 59)

    $default	reduce using rule 59 (factor)



state 60

    selection_stmt  ->  IF LPAREN . expression RPAREN statement   (rule 34)
    selection_stmt  ->  IF LPAREN . expression RPAREN statement ELSE statement   (rule 35)

    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44

    expression	go to state 79
    var 	go to state 54
    simple_expression	go to state 55
    additive_expression	go to state 56
    term	go to state 57
    factor	go to state 58
    call	go to state 59



state 61

    iteration_stmt  ->  WHILE LPAREN . expression RPAREN statement   (rule 36)

    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44

    expression	go to state 80
    var 	go to state 54
    simple_expression	go to state 55
    additive_expression	go to state 56
    term	go to state 57
    factor	go to state 58
    call	go to state 59



state 62

    return_stmt  ->  RETURN SEMI .   (rule 37)

    $default	reduce using rule 37 (return_stmt)



state 63

    return_stmt  ->  RETURN expression . SEMI   (rule 38)

    SEMI	shift, and go to state 81



state 64

    var  ->  ID @6 . LBRACE expression RBRACE   (rule 43)

    LBRACE	shift, and go to state 82



state 65

    call  ->  ID @7 . LPAREN args RPAREN   (rule 62)

    LPAREN	shift, and go to state 83



state 66

    factor  ->  LPAREN expression . RPAREN   (rule 57)

    RPAREN	shift, and go to state 84



state 67

    expression_stmt  ->  expression SEMI .   (rule 32)

    $default	reduce using rule 32 (expression_stmt)



state 68

    expression  ->  var ASSIGN . expression   (rule 39)

    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44

    expression	go to state 85
    var 	go to state 54
    simple_expression	go to state 55
    additive_expression	go to state 56
    term	go to state 57
    factor	go to state 58
    call	go to state 59



state 69

    simple_expression  ->  additive_expression EQ . additive_expression   (rule 49)

    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44

    var 	go to state 86
    additive_expression	go to state 87
    term	go to state 57
    factor	go to state 58
    call	go to state 59



state 70

    simple_expression  ->  additive_expression NE . additive_expression   (rule 48)

    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44

    var 	go to state 86
    additive_expression	go to state 88
    term	go to state 57
    factor	go to state 58
    call	go to state 59



state 71

    simple_expression  ->  additive_expression LT . additive_expression   (rule 45)

    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44

    var 	go to state 86
    additive_expression	go to state 89
    term	go to state 57
    factor	go to state 58
    call	go to state 59



state 72

    simple_expression  ->  additive_expression LE . additive_expression   (rule 44)

    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44

    var 	go to state 86
    additive_expression	go to state 90
    term	go to state 57
    factor	go to state 58
    call	go to state 59



state 73

    simple_expression  ->  additive_expression GT . additive_expression   (rule 46)

    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44

    var 	go to state 86
    additive_expression	go to state 91
    term	go to state 57
    factor	go to state 58
    call	go to state 59



state 74

    simple_expression  ->  additive_expression GE . additive_expression   (rule 47)

    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44

    var 	go to state 86
    additive_expression	go to state 92
    term	go to state 57
    factor	go to state 58
    call	go to state 59



state 75

    additive_expression  ->  additive_expression PLUS . term   (rule 51)

    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44

    var 	go to state 86
    term	go to state 93
    factor	go to state 58
    call	go to state 59



state 76

    additive_expression  ->  additive_expression MINUS . term   (rule 52)

    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44

    var 	go to state 86
    term	go to state 94
    factor	go to state 58
    call	go to state 59



state 77

    term  ->  term TIMES . factor   (rule 54)

    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44

    var 	go to state 86
    factor	go to state 95
    call	go to state 59



state 78

    term  ->  term OVER . factor   (rule 55)

    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44

    var 	go to state 86
    factor	go to state 96
    call	go to state 59



state 79

    selection_stmt  ->  IF LPAREN expression . RPAREN statement   (rule 34)
    selection_stmt  ->  IF LPAREN expression . RPAREN statement ELSE statement   (rule 35)

    RPAREN	shift, and go to state 97



state 80

    iteration_stmt  ->  WHILE LPAREN expression . RPAREN statement   (rule 36)

    RPAREN	shift, and go to state 98



state 81

    return_stmt  ->  RETURN expression SEMI .   (rule 38)

    $default	reduce using rule 38 (return_stmt)



state 82

    var  ->  ID @6 LBRACE . expression RBRACE   (rule 43)

    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44

    expression	go to state 99
    var 	go to state 54
    simple_expression	go to state 55
    additive_expression	go to state 56
    term	go to state 57
    factor	go to state 58
    call	go to state 59



state 83

    call  ->  ID @7 LPAREN . args RPAREN   (rule 62)

    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44

    $default	reduce using rule 64 (args)

    expression	go to state 100
    var 	go to state 54
    simple_expression	go to state 55
    additive_expression	go to state 56
    term	go to state 57
    factor	go to state 58
    call	go to state 59
    args	go to state 101
    arg_list	go to state 102



state 84

    factor  ->  LPAREN expression RPAREN .   (rule 57)

    $default	reduce using rule 57 (factor)



state 85

    expression  ->  var ASSIGN expression .   (rule 39)

    $default	reduce using rule 39 (expression)



state 86

    factor  ->  var .   (rule 58)

    $default	reduce using rule 58 (factor)



state 87

    simple_expression  ->  additive_expression EQ additive_expression .   (rule 49)
    additive_expression  ->  additive_expression . PLUS term   (rule 51)
    additive_expression  ->  additive_expression . MINUS term   (rule 52)

    PLUS	shift, and go to state 75
    MINUS	shift, and go to state 76

    $default	reduce using rule 49 (simple_expression)



state 88

    simple_expression  ->  additive_expression NE additive_expression .   (rule 48)
    additive_expression  ->  additive_expression . PLUS term   (rule 51)
    additive_expression  ->  additive_expression . MINUS term   (rule 52)

    PLUS	shift, and go to state 75
    MINUS	shift, and go to state 76

    $default	reduce using rule 48 (simple_expression)



state 89

    simple_expression  ->  additive_expression LT additive_expression .   (rule 45)
    additive_expression  ->  additive_expression . PLUS term   (rule 51)
    additive_expression  ->  additive_expression . MINUS term   (rule 52)

    PLUS	shift, and go to state 75
    MINUS	shift, and go to state 76

    $default	reduce using rule 45 (simple_expression)



state 90

    simple_expression  ->  additive_expression LE additive_expression .   (rule 44)
    additive_expression  ->  additive_expression . PLUS term   (rule 51)
    additive_expression  ->  additive_expression . MINUS term   (rule 52)

    PLUS	shift, and go to state 75
    MINUS	shift, and go to state 76

    $default	reduce using rule 44 (simple_expression)



state 91

    simple_expression  ->  additive_expression GT additive_expression .   (rule 46)
    additive_expression  ->  additive_expression . PLUS term   (rule 51)
    additive_expression  ->  additive_expression . MINUS term   (rule 52)

    PLUS	shift, and go to state 75
    MINUS	shift, and go to state 76

    $default	reduce using rule 46 (simple_expression)



state 92

    simple_expression  ->  additive_expression GE additive_expression .   (rule 47)
    additive_expression  ->  additive_expression . PLUS term   (rule 51)
    additive_expression  ->  additive_expression . MINUS term   (rule 52)

    PLUS	shift, and go to state 75
    MINUS	shift, and go to state 76

    $default	reduce using rule 47 (simple_expression)



state 93

    additive_expression  ->  additive_expression PLUS term .   (rule 51)
    term  ->  term . TIMES factor   (rule 54)
    term  ->  term . OVER factor   (rule 55)

    TIMES	shift, and go to state 77
    OVER	shift, and go to state 78

    $default	reduce using rule 51 (additive_expression)



state 94

    additive_expression  ->  additive_expression MINUS term .   (rule 52)
    term  ->  term . TIMES factor   (rule 54)
    term  ->  term . OVER factor   (rule 55)

    TIMES	shift, and go to state 77
    OVER	shift, and go to state 78

    $default	reduce using rule 52 (additive_expression)



state 95

    term  ->  term TIMES factor .   (rule 54)

    $default	reduce using rule 54 (term)



state 96

    term  ->  term OVER factor .   (rule 55)

    $default	reduce using rule 55 (term)



state 97

    selection_stmt  ->  IF LPAREN expression RPAREN . statement   (rule 34)
    selection_stmt  ->  IF LPAREN expression RPAREN . statement ELSE statement   (rule 35)

    IF  	shift, and go to state 39
    WHILE	shift, and go to state 40
    RETURN	shift, and go to state 41
    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44
    LCURLY	shift, and go to state 28
    SEMI	shift, and go to state 46

    compound_stmt	go to state 47
    statement	go to state 103
    expression_stmt	go to state 49
    selection_stmt	go to state 50
    iteration_stmt	go to state 51
    return_stmt	go to state 52
    expression	go to state 53
    var 	go to state 54
    simple_expression	go to state 55
    additive_expression	go to state 56
    term	go to state 57
    factor	go to state 58
    call	go to state 59



state 98

    iteration_stmt  ->  WHILE LPAREN expression RPAREN . statement   (rule 36)

    IF  	shift, and go to state 39
    WHILE	shift, and go to state 40
    RETURN	shift, and go to state 41
    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44
    LCURLY	shift, and go to state 28
    SEMI	shift, and go to state 46

    compound_stmt	go to state 47
    statement	go to state 104
    expression_stmt	go to state 49
    selection_stmt	go to state 50
    iteration_stmt	go to state 51
    return_stmt	go to state 52
    expression	go to state 53
    var 	go to state 54
    simple_expression	go to state 55
    additive_expression	go to state 56
    term	go to state 57
    factor	go to state 58
    call	go to state 59



state 99

    var  ->  ID @6 LBRACE expression . RBRACE   (rule 43)

    RBRACE	shift, and go to state 105



state 100

    arg_list  ->  expression .   (rule 66)

    $default	reduce using rule 66 (arg_list)



state 101

    call  ->  ID @7 LPAREN args . RPAREN   (rule 62)

    RPAREN	shift, and go to state 106



state 102

    args  ->  arg_list .   (rule 63)
    arg_list  ->  arg_list . COMMA expression   (rule 65)

    COMMA	shift, and go to state 107

    $default	reduce using rule 63 (args)



state 103

    selection_stmt  ->  IF LPAREN expression RPAREN statement .   (rule 34)
    selection_stmt  ->  IF LPAREN expression RPAREN statement . ELSE statement   (rule 35)

    ELSE	shift, and go to state 108

    ELSE	[reduce using rule 34 (selection_stmt)]
    $default	reduce using rule 34 (selection_stmt)



state 104

    iteration_stmt  ->  WHILE LPAREN expression RPAREN statement .   (rule 36)

    $default	reduce using rule 36 (iteration_stmt)



state 105

    var  ->  ID @6 LBRACE expression RBRACE .   (rule 43)

    $default	reduce using rule 43 (var)



state 106

    call  ->  ID @7 LPAREN args RPAREN .   (rule 62)

    $default	reduce using rule 62 (call)



state 107

    arg_list  ->  arg_list COMMA . expression   (rule 65)

    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44

    expression	go to state 109
    var 	go to state 54
    simple_expression	go to state 55
    additive_expression	go to state 56
    term	go to state 57
    factor	go to state 58
    call	go to state 59



state 108

    selection_stmt  ->  IF LPAREN expression RPAREN statement ELSE . statement   (rule 35)

    IF  	shift, and go to state 39
    WHILE	shift, and go to state 40
    RETURN	shift, and go to state 41
    ID  	shift, and go to state 42
    NUM 	shift, and go to state 43
    LPAREN	shift, and go to state 44
    LCURLY	shift, and go to state 28
    SEMI	shift, and go to state 46

    compound_stmt	go to state 47
    statement	go to state 110
    expression_stmt	go to state 49
    selection_stmt	go to state 50
    iteration_stmt	go to state 51
    return_stmt	go to state 52
    expression	go to state 53
    var 	go to state 54
    simple_expression	go to state 55
    additive_expression	go to state 56
    term	go to state 57
    factor	go to state 58
    call	go to state 59



state 109

    arg_list  ->  arg_list COMMA expression .   (rule 65)

    $default	reduce using rule 65 (arg_list)



state 110

    selection_stmt  ->  IF LPAREN expression RPAREN statement ELSE statement .   (rule 35)

    $default	reduce using rule 35 (selection_stmt)



state 111

    $   	go to state 112



state 112

    $   	go to state 113



state 113

    $default	accept
